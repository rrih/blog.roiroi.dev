{"pageProps":{"post":{"title":"[Go] APIからJSONパース","date":"2021-04-29T13:48:07.322+09:00","slug":"go-api-get","author":{"name":"ろい","picture":"https://github.com/rrih.png"},"content":"<h2>前提</h2>\n<p>Go なんもわからん初心者のメモ</p>\n<p>Go で外部の WebAPI 叩いてごにょごにょやりたかった。それだけ</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"user_id\"</span>: <span class=\"hljs-number\">999</span>,\n  <span class=\"hljs-attr\">\"nickname\"</span>: <span class=\"hljs-string\">\"rrih\"</span>,\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"河原\"</span>,\n  <span class=\"hljs-attr\">\"birthday\"</span>: <span class=\"hljs-string\">\"1997-09-11\"</span>,\n  <span class=\"hljs-attr\">\"gender\"</span>: <span class=\"hljs-string\">\"male\"</span>,\n  <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"example@rrih.co.jp\"</span>,\n  <span class=\"hljs-attr\">\"phone_number\"</span>: <span class=\"hljs-number\">1234567890</span>\n}</code></pre>\n<p>というjson形式のデータを返すapi(<a href=\"https://api.roiroi.dev/v1/example/users/me\">https://api.roiroi.dev/v1/example/users/me</a>)があったとします。これを叩いてgoでごにょります。</p>\n<p>ソース</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"encoding/json\"</span>\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"io\"</span>\n\t<span class=\"hljs-string\">\"net/http\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> AutoGenerated <span class=\"hljs-keyword\">struct</span> {\n\tUserID      <span class=\"hljs-keyword\">int</span>    <span class=\"hljs-string\">`json:\"user_id\"`</span>\n\tNickname    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"nickname\"`</span>\n\tName        <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"name\"`</span>\n\tBirthday    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"birthday\"`</span>\n\tGender      <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"gender\"`</span>\n\tEmail       <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"email\"`</span>\n\tPhoneNumber <span class=\"hljs-keyword\">int</span>    <span class=\"hljs-string\">`json:\"phone_number\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\turl := <span class=\"hljs-string\">\"https://api.roiroi.dev/v1/example/users/me\"</span>\n    resp, _ := http.Get(url)\n    <span class=\"hljs-keyword\">defer</span> resp.Body.Close()\n    <span class=\"hljs-comment\">// byteArray, _ := ioutil.ReadAll(resp.Body) ← 1.16系では非推奨</span>\n    byteArray, _ := io.ReadAll(resp.Body)\n\n\tjsonBytes := ([]<span class=\"hljs-keyword\">byte</span>)(byteArray)\n\tdata := <span class=\"hljs-built_in\">new</span>(AutoGenerated)\n\t<span class=\"hljs-keyword\">if</span> err := json.Unmarshal(jsonBytes, data); err != <span class=\"hljs-literal\">nil</span> {\n\t\tfmt.Println(<span class=\"hljs-string\">\"JSON Unmarshal error:\"</span>, err)\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\n\tfmt.Println(data.UserID)\n\tfmt.Println(data.Nickname)\n\tfmt.Println(data.Name)\n\tfmt.Println(data.Birthday)\n\tfmt.Println(data.Gender)\n\tfmt.Println(data.Email)\n\tfmt.Println(data.PhoneNumber)\n}</code></pre>\n<p>json で受け取るデータの構造体を定義しておきます。<br>\n<code>resp.Body</code> を <code>byteArray</code> にgoのバージョンは1.16なので <code>ioutil.ReadAll()</code> ではなく <code>io.ReadAll()</code> を使って<code>[]uint8</code>型のバイナリの配列として受け取る。これを第一引数、構造体をnewしたdataを第二引数として<code>json.Unmarshal()</code>関数に渡すと構造体にjson形式のデータが渡せたことになってる。(ように見えます)</p>\n<p>あと<a href=\"https://mholt.github.io/json-to-go/\">これ</a>は便利。jsonから構造体を雑に定義したい時に使えます</p>\n<h2>参考文献</h2>\n<p><a href=\"https://tikasan.hatenablog.com/entry/2017/04/26/110854\">https://tikasan.hatenablog.com/entry/2017/04/26/110854</a></p>\n","ogImage":{"url":"https://pbs.twimg.com/profile_banners/636879657/1606257712/1500x500"},"coverImage":"https://pbs.twimg.com/profile_banners/636879657/1606257712/1500x500"}},"__N_SSG":true}