{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","App","useState","userName","setUserName","avatarIcon","setAvatarIcon","date","setDate","todoText","setTodoText","allTodos","setAllTodos","getAllTodos","a","axios","get","then","res","console","log","data","getUserWithGitHub","r","href","html_url","className","name","au","src","avatar_url","alt","width","useEffect","method","dateFormat","selected","showTimeSelect","onChange","type","placeholder","e","target","value","onClick","Error","todo","text","toString","split","post","window","location","reload","map","i","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uOAMaA,G,YAAS,mDA+HPC,MA7Hf,WAAe,MAEmBC,qBAFnB,mBAENC,EAFM,KAEIC,EAFJ,OAIuBF,qBAJvB,mBAING,EAJM,KAIMC,EAJN,OAKWJ,qBALX,mBAKNK,EALM,KAKAC,EALA,OAMmBN,mBAAiB,IANpC,mBAMNO,EANM,KAMIC,EANJ,OAOmBR,mBAAyB,IAP5C,mBAONS,EAPM,KAOIC,EAPJ,KASPC,EAAW,uCAAG,sBAAAC,EAAA,sEACZC,IAAMC,IAAIhB,GACbiB,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,MAChBT,EAAYM,EAAIG,SAJF,2CAAH,qDAQXC,EAAiB,uCAAG,sBAAAR,EAAA,sEAClBC,IAAMC,IAAI,qCACbC,MAAK,SAACC,GACL,IAAMK,EAAiB,uBAAGC,KAAMN,EAAIG,KAAKI,SAAUC,UAAU,mCAAmCR,EAAIG,KAAKM,MACzGvB,EAAYmB,GACZ,IAAMK,EAAK,yBAAKC,IAAKX,EAAIG,KAAKS,WAAYC,IAAI,kBAAkBC,MAAO,KACvE1B,EAAcsB,MANM,2CAAH,qDAoCvB,OA1BAK,qBAAU,WACRpB,IACAS,MAEC,IAuBD,6BACE,yBAAKI,UAAU,gCACb,6BAAMvB,EAAN,cACA,6CACMA,EADN,IACiBE,EADjB,gGAIF,yBAAKqB,UAAU,uCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WAIb,0BAAMA,UAAU,aAAaQ,OAAO,QAClC,6BACE,+CACA,kBAAC,IAAD,CAEEC,WAAW,aACXC,SAAU7B,EACV8B,gBAAc,EACdC,SA1CS,SAAA/B,GACvBC,EAAQD,OA6CE,6BACE,+CACA,2BACEgC,KAAK,OACLC,YAAY,OACZd,UAAU,gBACVC,KAAK,OACLW,SAAU,SAACG,GAAO/B,EAAY+B,EAAEC,OAAOC,WAG3C,4BACEJ,KAAK,SACLb,UAAU,0BACVkB,QAvDW,SAACH,GACxB,GAAgB,MAAZhC,GAA4B,MAARF,EAUtB,MAAM,IAAIsC,MAAM,oBAThB,IAAMC,EAAO,CACXC,KAAMtC,EACNF,KAAMA,EAAKyC,WAAWC,MAAM,KAAK,IAEnClC,IAAMmC,KAAKlD,EAAQ8C,GAAM7B,MAAK,SAACwB,GAC7BU,OAAOC,SAASC,cA6CV,yCAYN,wBAAI3B,UAAU,mBACXf,EAAS2C,KAAI,SAACR,EAAMS,GACnB,OAAO,wBAAIC,IAAKD,EAAG7B,UAAU,uFAW3B,yBAAKA,UAAU,IAAIoB,EAAKC,MACxB,yBAAKrB,UAAU,IAAIoB,EAAKvC,cC/GlBkD,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.44fa2161.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport { RrihTodoType } from \"./models/interfaces\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.scss';\nexport const apiUrl = 'https://kyugyo-back.herokuapp.com/api/rrih-todo'\n\nfunction App() {\n  // const userNameWithGitHub = <a href=\"https://github.com/rrih\" className=\"text-decoration-none text-light\">rrih</a>;\n  const [userName, setUserName] = useState<JSX.Element>();\n  // const [isLogin, setIsLogin] = useState<Boolean>(false);\n  const [avatarIcon, setAvatarIcon] = useState<JSX.Element>();\n  const [date, setDate] = useState<Date>();\n  const [todoText, setTodoText] = useState<String>('');\n  const [allTodos, setAllTodos] = useState<RrihTodoType[]>([]);\n\n  const getAllTodos = async () => {\n    await axios.get(apiUrl)\n      .then((res) => {\n        console.log(res.data);\n        setAllTodos(res.data);\n      })\n  }\n\n  const getUserWithGitHub = async () => {\n    await axios.get('https://api.github.com/users/rrih')\n      .then((res) => {\n        const r: JSX.Element = <a href={res.data.html_url} className=\"text-decoration-none text-light\">{res.data.name}</a>;\n        setUserName(r);\n        const au = <img src={res.data.avatar_url} alt=\"rrih-avatar-url\" width={30}/>\n        setAvatarIcon(au);\n      });\n  };\n\n  useEffect(() => {\n    getAllTodos();\n    getUserWithGitHub();\n    \n  }, []);\n\n  const handleDateChange = date => {\n    setDate(date);\n  }\n\n  const handleTodoSubmit = (e) => {\n    if (todoText != null && date != null) {\n      const todo = {\n        text: todoText,\n        date: date.toString().split('T')[0]\n      };\n      axios.post(apiUrl, todo).then((e) => {\n        window.location.reload();\n      })\n    }\n    else {\n      throw new Error('Validation Error');\n    }\n    // e.preventDefault();\n  }\n\n  return (\n    <div>\n      <nav className=\"navbar bg-success text-light\">\n        <div>{userName}のTODO</div>\n        <div>\n          ただ {userName} {avatarIcon} がやることを並べるだけのサイト\n        </div>\n      </nav>\n      <div className=\"rrih-w mx-md-auto container pt-md-2\">\n        <div className=\"d-md-flex\">\n          <div className=\"ml-md-5\">\n            {/* <div className=\"border rounded py-md-3 px-md-5 my-md-2\">\n              いつまでに？\n            </div> */}\n            <form className=\"form-group\" method=\"post\">\n              <div>\n                <label>期日</label>\n                <DatePicker\n                  // dateFormat=\"Pp\"\n                  dateFormat=\"yyyy/MM/dd\"\n                  selected={date}\n                  showTimeSelect\n                  onChange={handleDateChange}\n                  // customInput={CustomInput}\n                />\n              </div>\n              <div>\n                <label>内容</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"todo\"\n                  className=\"input todo...\"\n                  name=\"todo\"\n                  onChange={(e) => {setTodoText(e.target.value)}}\n                />\n              </div>\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-success\"\n                onClick={handleTodoSubmit}\n              >\n                TODOを生成する\n              </button>\n            </form>\n            \n          </div>\n        </div>\n                \n        <ul className=\"list-group mb-5\">\n          {allTodos.map((todo, i) => {\n            return <li key={i} className=\"list-group-item list-group-item-light text-dark my-1 d-flex justify-content-between\">\n              {/* date: {todo.date}text: {todo.text} */}\n              \n              {/* <DatePicker\n                // dateFormat=\"Pp\"\n                dateFormat=\"yyyy/MM/dd\"\n                selected={todo.date}\n                showTimeSelect\n                onChange={(e) => handleDateChange(e)}\n                // customInput={CustomInput}\n              /> */}\n              <div className=\"\">{todo.text}</div>\n              <div className=\"\">{todo.date}</div>\n            </li>;\n          })}\n        </ul>\n      </div>\n      {/* <footer className=\"bg-success text-light text-center fixed-bottom\">&copy; {userName}</footer> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}