{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","avatarIcon","setAvatarIcon","getUserWithGitHub","a","axios","get","then","res","au","src","data","avatar_url","alt","width","useEffect","className","href","data-text","data-url","data-lang","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yRAOmB,UADJ,oCACI,kBAgPJA,MA9Of,WAAe,MAEuBC,qBAFvB,mBAENC,EAFM,KAEMC,EAFN,KAePC,EAAiB,uCAAG,sBAAAC,EAAA,sEAClBC,IAAMC,IAAI,qCACbC,MAAK,SAACC,GAGL,IAAMC,EAAK,yBAAKC,IAAKF,EAAIG,KAAKC,WAAYC,IAAI,kBAAkBC,MAAO,KACvEZ,EAAcO,MANM,2CAAH,qDA+DvB,OArDAM,qBAAU,WAERZ,MAEC,IAkDD,6BACE,yBAAKa,UAAU,gCACb,6BACE,uBAAGC,KAAK,yBAAyBD,UAAU,cAA3C,SAEF,6BACE,uBAAGC,KAAK,2BAA2BhB,KAGvC,yBAAKe,UAAU,uCACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iBACf,oCADA,0DAIA,yBAAKA,UAAU,iBACf,kDACA,4BACE,wCACW,uBAAGC,KAAK,gCAAR,cAEX,uCACQ,uBAAGA,KAAK,2BAAR,UAER,qEACQ,uBAAGA,KAAK,+BAAR,gCAER,sCACO,uBAAGA,KAAK,0BAAR,UAEP,yCACY,uBAAGA,KAAK,8BAAR,WAEZ,0CACa,uBAAGA,KAAK,iCAAR,aAEb,yCACY,uBAAGA,KAAK,2CAAR,yBAOd,yBAAKD,UAAU,iBACb,kDACA,4BACE,8GAHJ,wGAOuB,6BAPvB,mLAWA,yBAAKA,UAAU,iBACb,mCACA,4BACE,4BACE,uBAAGC,KAAK,iCAAR,kCAFJ,uFAKE,4BACE,uBAAGA,KAAK,yCAAR,0CANJ,mDASE,4BACE,uBAAGA,KAAK,mCAAR,oCAVJ,6EAgBF,yBAAKD,UAAU,iBACb,wDACA,4BACE,2CACA,qCACA,qDAGJ,yBAAKA,UAAU,iBACb,uCACA,4BACE,4BACE,kDACA,4BACE,8CAGJ,4BACE,sCACA,4BACE,6JACA,uJACA,qIAIJ,4BACE,kFACA,4BACE,4BACE,uBAAGC,KAAK,gWAAR,mCAIF,4BACE,uBAAGA,KAAK,2JAAR,YAIF,+DACA,wDACA,2GACA,4CACA,4BAAI,uBAAGA,KAAK,kCAAR,mBACJ,4CACA,8FAEE,4BACE,4BAAI,uBAAGA,KAAK,2CAAR,YAEJ,4BACE,uBAAGA,KAAK,mHAAR,eAIF,0CACA,0CACA,gDACA,gFACA,+CACA,kDACA,0DAGJ,4CACA,8DACA,4BAAI,yDACJ,yEAMV,uBAAGD,UAAU,+DAA+DC,KAAK,sBAAsBC,YAAU,OAAOC,WAAS,yBAAyBC,YAAU,MAClK,uBAAGJ,UAAU,mBADf,8CChOQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f42d93f5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\n// import DatePicker from \"react-datepicker\";\n// import { RrihTodoType } from \"./models/interfaces\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.scss';\nconst domain = 'https://kyugyo-back.herokuapp.com';\nexport const apiUrl = `${domain}/api/rrih-todo`;\n\nfunction App() {\n  // const [userName, setUserName] = useState<JSX.Element>();\n  const [avatarIcon, setAvatarIcon] = useState<JSX.Element>();\n  // const [date, setDate] = useState<Date>();\n  // const [todoText, setTodoText] = useState<String>('');\n  // const [allTodos, setAllTodos] = useState<RrihTodoType[]>([]);\n\n  // const getAllTodos = async () => {\n  //   await axios.get(apiUrl)\n  //     .then((res) => {\n  //       console.log(res.data);\n  //       setAllTodos(res.data);\n  //     })\n  // }\n\n  const getUserWithGitHub = async () => {\n    await axios.get('https://api.github.com/users/rrih')\n      .then((res) => {\n        // const r: JSX.Element = <a href={res.data.html_url} className=\"text-decoration-none text-light\">{res.data.name}</a>;\n        // setUserName(r);\n        const au = <img src={res.data.avatar_url} alt=\"rrih-avatar-url\" width={30}/>\n        setAvatarIcon(au);\n      });\n  };\n\n  useEffect(() => {\n    // getAllTodos();\n    getUserWithGitHub();\n    \n  }, []);\n\n  // const handleDateChange = date => {\n  //   setDate(date);\n  // }\n\n  // const handleTodoSubmit = (e) => {\n  //   if (todoText != null && date != null) {\n  //     const todo = {\n  //       text: todoText,\n  //       date: date\n  //     };\n  //     axios.post(apiUrl, todo).then((e) => {\n  //       window.location.reload();\n  //     })\n  //   }\n  //   else {\n  //     // TODO バリデーションエラー時の処理\n  //     throw new Error('Validation Error');\n  //   }\n  //   // e.preventDefault();\n  // }\n\n  // const updateTodo = (todo) => {\n  //   if (todo == null) {\n  //     return null;\n  //   }\n  //   const updateTodo = {\n  //     text: todoText,\n  //     date: date\n  //   };\n  //   axios.put(`${apiUrl}/${todo._id}`, updateTodo)\n  //     .then((res) => {\n  //       setAllTodos(res.data);\n  //     });\n  //   // e.preventDefault();\n  // };\n\n  // const deleteTodo = (todo) => {\n  //   if (todo == null) {\n  //     return null;\n  //   }\n  //   axios.delete(`${apiUrl}/${todo._id}`, { data: todo })\n  //   .then((e) => {\n  //     window.location.reload();\n  //   });\n  //   // e.preventDefault();\n  // }\n\n  return (\n    <div>\n      <nav className=\"navbar bg-success text-light\">\n        <div>\n          <a href=\"https://rrih.github.io\" className=\"text-light\">rrih</a>\n        </div>\n        <div>\n          <a href=\"https://github.com/rrih\">{avatarIcon}</a>\n        </div>\n      </nav>\n      <div className=\"rrih-w mx-md-auto container pt-md-2\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto\">\n            <div className=\"profile text-left\">\n              <div className=\"border-bottom\">\n              <h2>rrih</h2>\n              紙を折り続けて死ぬ\n              </div>\n              <div className=\"border-bottom\">\n              <h3>リンク</h3>\n              <ul>\n                <li>\n                  Twitter: <a href=\"https://twitter.com/rrih_dev\">@rrih_dev</a>\n                </li>\n                <li>\n                GitHub: <a href=\"https://github.com/rrih\">@rrih</a>\n                </li>\n                <li>\n                はてなブログ: <a href=\"https://rrih.hatenablog.com\">https://rrih.hatenablog.com</a>\n                </li>\n                <li>\n                Qiita: <a href=\"https://qiita.com/rrih\">@rrih</a>\n                </li>\n                <li>\n                  Facebook: <a href=\"https://facebook.com/rsklv\">@rsklv</a>\n                </li>\n                <li>\n                  instagram: <a href=\"https://instagram.com/roi_web\">@roi_web</a>\n                </li>\n                <li>\n                  wantedly: <a href=\"https://www.wantedly.com/users/43733929\">リンク</a>\n                </li>\n              </ul>\n\n              \n              </div>\n\n              <div className=\"border-bottom\">\n                <h3>連絡先</h3>\n                <ul>\n                  <li>\n                    メールアドレス: rsklvあっとicloud.com\n                  </li>\n                </ul>\n                \"あっと\"の部分を\"@\"に変えてください。<br/>\n                メールも一応確認していますが、最も反応が早いものはTwitterです。\n              </div>\n\n              <div className=\"border-bottom\">\n                <h3>web</h3>\n                <ul>\n                  <li>\n                    <a href=\"https://rrih.github.io/kyugyo\">https://rrih.github.io/kyugyo</a>\n                  </li>\n                  店舗の休業情報のまとめサイト\n                  <li>\n                    <a href=\"http://rrih.github.io/sparkle-of-life\">http://rrih.github.io/sparkle-of-life</a>\n                  </li>\n                  いのちのかがやき\n                  <li>\n                    <a href=\"https://feel-prod.herokuapp.com\">https://feel-prod.herokuapp.com</a>\n                  </li>\n                  お気持ちを表明するサイト\n                </ul>\n              </div>\n              \n              <div className=\"border-bottom\">\n                <h3>使用技術</h3>\n                <ul>\n                  <li>CakePHP/PHP</li>\n                  <li>MySQL</li>\n                  <li>HTML/CSS/JavaScript</li>\n                </ul>\n              </div>\n              <div className=\"border-bottom\">\n                <h3>aboutme</h3>\n                <ul>\n                  <li> \n                    <h4>居場所</h4>\n                    <ul>\n                      <li>群馬</li>\n                    </ul>\n                  </li>\n                  <li>\n                    <h4>career</h4>\n                    <ul>\n                      <li>2017年4月〜2021年3月 東京電機大学理工学部理工学科</li>\n                      <li>2019年3月〜2020年7月 某社 webエンジニア, インターン</li>\n                      <li>2020年9月〜現在 某社, 開発部 インターン</li>\n                    </ul>\n                  </li>\n                  \n                  <li>\n                    <h4>興味/関心/趣味領域</h4>\n                    <ul>\n                      <li>\n                        <a href=\"https://www.origami-noa.jp/%E3%81%8A%E3%82%8A%E3%81%8C%E3%81%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E3%81%8A%E3%82%8A%E3%81%8C%E3%81%BFq-a/#:~:text=%E8%BF%91%E5%B9%B4%E3%81%AF%E3%80%81%E6%96%B0%E3%81%97%E3%81%84%E6%8A%98%E3%82%8A%E6%96%B9,%E5%89%B5%E4%BD%9C%E6%8A%98%E3%82%8A%E7%B4%99%E3%80%8D%E3%81%A8%E3%81%84%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\">\n                          創作折り紙\n                        </a>\n                      </li>\n                      <li>\n                        <a href=\"https://ja.wikipedia.org/wiki/Web%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0#%E3%82%B5%E3%83%BC%E3%83%90%E3%82%B5%E3%82%A4%E3%83%89\">\n                          web dev\n                        </a>\n                      </li>\n                      <li>イラスト/絵</li>\n                      <li>甘いもの</li>\n                      <li>サービス開発対象としてのSNS</li>\n                      <li>珈琲</li>\n                      <li><a href=\"https://www.monsterenergy.com/\">Monster Energy</a></li>\n                      <li>お酒</li>\n                      <li>\n                        漫画/アニメ/読書/ゲーム\n                        <ul>\n                          <li><a href=\"https://ja.wikipedia.org/wiki/NEW_GAME!\">\n                          NEWGAME</a></li>\n                          <li>\n                            <a href=\"https://ja.wikipedia.org/wiki/%E3%83%9D%E3%82%B1%E3%83%83%E3%83%88%E3%83%A2%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%BC\">\n                              Pokémon\n                            </a>\n                          </li>\n                          <li>EVANGELION</li>\n                          <li>DEATH NOTE</li>\n                          <li>Sword Art Online</li>\n                          <li>涼宮ハルヒの憂鬱</li>\n                          <li>Attack on Titan</li>\n                          <li>星新一</li>\n                          <li>鬼滅の刃</li>\n                        </ul>\n                      </li>\n                      <li>Apple devise</li>\n                      <li>一人暮らし</li>\n                      <ul><li>家探し中</li></ul>\n                      <li>より良い睡眠</li>\n                    </ul>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <a className=\"btn btn-outline-dark rounded-pill py-3 px-4 font-weight-bold\" href=\"//twitter.com/share\" data-text=\"rrih\" data-url=\"https://rrih.github.io\" data-lang=\"ja\">\n              <i className=\"fab fa-twitter\"></i> ツイートする\n            </a>\n          </div>\n        </div>\n      </div>\n      {/* <footer className=\"bg-success text-light text-center\">&copy; {userName}</footer> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}