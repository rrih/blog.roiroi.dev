{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","App","useState","setUserName","avatarIcon","setAvatarIcon","setAllTodos","getAllTodos","a","axios","get","then","res","console","log","data","getUserWithGitHub","r","href","html_url","className","name","au","src","avatar_url","alt","width","useEffect","data-text","data-url","data-lang","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0QAOaA,G,YAAM,UADJ,oCACI,mBAyGJC,MAvGf,WAAgB,IAAD,EACmBC,qBADnB,mBACIC,GADJ,aAEuBD,qBAFvB,mBAENE,EAFM,KAEMC,EAFN,OAGWH,qBAHX,gCAImBA,mBAAiB,KAJpC,gCAKmBA,mBAAyB,KAL5C,mBAKII,GALJ,WAOPC,EAAW,uCAAG,sBAAAC,EAAA,sEACZC,IAAMC,IAAIV,GACbW,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,MAChBT,EAAYM,EAAIG,SAJF,2CAAH,qDAQXC,EAAiB,uCAAG,sBAAAR,EAAA,sEAClBC,IAAMC,IAAI,qCACbC,MAAK,SAACC,GACL,IAAMK,EAAiB,uBAAGC,KAAMN,EAAIG,KAAKI,SAAUC,UAAU,mCAAmCR,EAAIG,KAAKM,MACzGlB,EAAYc,GACZ,IAAMK,EAAK,yBAAKC,IAAKX,EAAIG,KAAKS,WAAYC,IAAI,kBAAkBC,MAAO,KACvErB,EAAciB,MANM,2CAAH,qDA+DvB,OArDAK,qBAAU,WACRpB,IACAS,MAEC,IAkDD,6BACE,yBAAKI,UAAU,gCACb,qCACA,6BACE,uBAAGF,KAAK,2BAA2Bd,KAGvC,yBAAKgB,UAAU,uCACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACZhB,GAEH,uBAAGgB,UAAU,oCAAoCF,KAAK,sBAAsBU,YAAU,OAAOC,WAAS,yBAAyBC,YAAU,MACvI,uBAAGV,UAAU,mBADf,8CCzFQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.392b62de.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport { RrihTodoType } from \"./models/interfaces\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.scss';\nconst domain = 'https://kyugyo-back.herokuapp.com';\nexport const apiUrl = `${domain}/api/rrih-todo`;\n\nfunction App() {\n  const [userName, setUserName] = useState<JSX.Element>();\n  const [avatarIcon, setAvatarIcon] = useState<JSX.Element>();\n  const [date, setDate] = useState<Date>();\n  const [todoText, setTodoText] = useState<String>('');\n  const [allTodos, setAllTodos] = useState<RrihTodoType[]>([]);\n\n  const getAllTodos = async () => {\n    await axios.get(apiUrl)\n      .then((res) => {\n        console.log(res.data);\n        setAllTodos(res.data);\n      })\n  }\n\n  const getUserWithGitHub = async () => {\n    await axios.get('https://api.github.com/users/rrih')\n      .then((res) => {\n        const r: JSX.Element = <a href={res.data.html_url} className=\"text-decoration-none text-light\">{res.data.name}</a>;\n        setUserName(r);\n        const au = <img src={res.data.avatar_url} alt=\"rrih-avatar-url\" width={30}/>\n        setAvatarIcon(au);\n      });\n  };\n\n  useEffect(() => {\n    getAllTodos();\n    getUserWithGitHub();\n    \n  }, []);\n\n  const handleDateChange = date => {\n    setDate(date);\n  }\n\n  const handleTodoSubmit = (e) => {\n    if (todoText != null && date != null) {\n      const todo = {\n        text: todoText,\n        date: date\n      };\n      axios.post(apiUrl, todo).then((e) => {\n        window.location.reload();\n      })\n    }\n    else {\n      // TODO バリデーションエラー時の処理\n      throw new Error('Validation Error');\n    }\n    // e.preventDefault();\n  }\n\n  // const updateTodo = (todo) => {\n  //   if (todo == null) {\n  //     return null;\n  //   }\n  //   const updateTodo = {\n  //     text: todoText,\n  //     date: date\n  //   };\n  //   axios.put(`${apiUrl}/${todo._id}`, updateTodo)\n  //     .then((res) => {\n  //       setAllTodos(res.data);\n  //     });\n  //   // e.preventDefault();\n  // };\n\n  const deleteTodo = (todo) => {\n    if (todo == null) {\n      return null;\n    }\n    axios.delete(`${apiUrl}/${todo._id}`, { data: todo })\n    .then((e) => {\n      window.location.reload();\n    });\n    // e.preventDefault();\n  }\n\n  return (\n    <div>\n      <nav className=\"navbar bg-success text-light\">\n        <div>rrih</div>\n        <div>\n          <a href=\"https://github.com/rrih\">{avatarIcon}</a>\n        </div>\n      </nav>\n      <div className=\"rrih-w mx-md-auto container pt-md-2\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto\">\n            <div className=\"rrih-top-icon m-3\">\n              {avatarIcon}\n            </div>\n            <a className=\"btn btn-outline-dark rounded-pill\" href=\"//twitter.com/share\" data-text=\"rrih\" data-url=\"https://rrih.github.io\" data-lang=\"ja\">\n              <i className=\"fab fa-twitter\"></i> ツイートする\n            </a>\n          </div>\n        </div>\n      </div>\n      {/* <footer className=\"bg-success text-light text-center\">&copy; {userName}</footer> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}