{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2021/0104-man-zsh/","result":{"data":{"site":{"siteMetadata":{"title":"rrih"}},"markdownRemark":{"id":"f6cc7023-fce0-5c8a-8004-a3e8c188b7c5","excerpt":"","html":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NAME\n       <span class=\"token function\">zsh</span> - the Z shell\n\nOVERVIEW\n       Because <span class=\"token function\">zsh</span> contains many features, the <span class=\"token function\">zsh</span> manual has been <span class=\"token function\">split</span> into a number of sections:\n\n       <span class=\"token function\">zsh</span>          Zsh overview <span class=\"token punctuation\">(</span>this section<span class=\"token punctuation\">)</span>\n       zshroadmap   Informal introduction to the manual\n       zshmisc      Anything not fitting into the other sections\n       zshexpn      Zsh <span class=\"token builtin class-name\">command</span> and parameter expansion\n       zshparam     Zsh parameters\n       zshoptions   Zsh options\n       zshbuiltins  Zsh built-in functions\n       zshzle       Zsh <span class=\"token builtin class-name\">command</span> line editing\n       zshcompwid   Zsh completion widgets\n       zshcompsys   Zsh completion system\n       zshcompctl   Zsh completion control\n       zshmodules   Zsh loadable modules\n       zshtcpsys    Zsh built-in TCP functions\n       zshzftpsys   Zsh built-in FTP client\n       zshcontrib   Additional <span class=\"token function\">zsh</span> functions and utilities\n       zshall       Meta-man page containing all of the above\n\nDESCRIPTION\n       Zsh  is  a UNIX <span class=\"token builtin class-name\">command</span> interpreter <span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">)</span> usable as an interactive login shell and as a shell script <span class=\"token builtin class-name\">command</span> processor.  Of the standard shells, <span class=\"token function\">zsh</span> <span class=\"token function\">most</span> closely resembles ksh but includes many\n       enhancements.  It does not provide compatibility with POSIX or other shells <span class=\"token keyword\">in</span> its default operating mode:  see the section Compatibility below.\n\n       Zsh has <span class=\"token builtin class-name\">command</span> line editing, <span class=\"token builtin class-name\">builtin</span> spelling correction, programmable <span class=\"token builtin class-name\">command</span> completion, shell functions <span class=\"token punctuation\">(</span>with autoloading<span class=\"token punctuation\">)</span>, a <span class=\"token function\">history</span> mechanism, and a <span class=\"token function\">host</span> of other features.\n\nAUTHOR\n       Zsh was originally written by Paul Falstad <span class=\"token operator\">&lt;</span>pf@zsh.org<span class=\"token operator\">></span>.  Zsh is now maintained by the members of the zsh-workers mailing list <span class=\"token operator\">&lt;</span>zsh-workers@zsh.org<span class=\"token operator\">></span>.  The development is currently coordinated  by\n       Peter Stephenson <span class=\"token operator\">&lt;</span>pws@zsh.org<span class=\"token operator\">></span>.  The coordinator can be contacted at <span class=\"token operator\">&lt;</span>coordinator@zsh.org<span class=\"token operator\">></span>, but matters relating to the code should generally go to the mailing list.\n\nAVAILABILITY\n       Zsh is available from the following HTTP and anonymous FTP site.\n\n       ftp://ftp.zsh.org/pub/\n       https://www.zsh.org/pub/\n       <span class=\"token punctuation\">)</span>\n\n       The  up-to-date  <span class=\"token builtin class-name\">source</span>  code  is  available  via  Git  from  Sourceforge.   See  https://sourceforge.net/projects/zsh/  <span class=\"token keyword\">for</span>  details.   A  summary of instructions <span class=\"token keyword\">for</span> the archive can be found at\n       http://zsh.sourceforge.net/.\n\nMAILING LISTS\n       Zsh has <span class=\"token number\">3</span> mailing lists:\n\n       <span class=\"token operator\">&lt;</span>zsh-announce@zsh.org<span class=\"token operator\">></span>\n              Announcements about releases, major changes <span class=\"token keyword\">in</span> the shell and the monthly posting of the Zsh FAQ.  <span class=\"token punctuation\">(</span>moderated<span class=\"token punctuation\">)</span>\n\n       <span class=\"token operator\">&lt;</span>zsh-users@zsh.org<span class=\"token operator\">></span>\n              User discussions.\n\n       <span class=\"token operator\">&lt;</span>zsh-workers@zsh.org<span class=\"token operator\">></span>\n              Hacking, development, bug reports and patches.\n\n       To subscribe or unsubscribe, send mail to the associated administrative address <span class=\"token keyword\">for</span> the mailing list.\n\n       <span class=\"token operator\">&lt;</span>zsh-announce-subscribe@zsh.org<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>zsh-users-subscribe@zsh.org<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>zsh-workers-subscribe@zsh.org<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>zsh-announce-unsubscribe@zsh.org<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>zsh-users-unsubscribe@zsh.org<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>zsh-workers-unsubscribe@zsh.org<span class=\"token operator\">></span>\n        YOU ONLY NEED TO JOIN ONE OF THE MAILING LISTS AS THEY ARE NESTED.  All submissions to zsh-announce are automatically forwarded to zsh-users.  All submissions to zsh-users are automatically  for-\n       warded to zsh-workers.\n\n       If you have problems subscribing/unsubscribing to any of the mailing lists, send mail to <span class=\"token operator\">&lt;</span>listmaster@zsh.org<span class=\"token operator\">></span>.  The mailing lists are maintained by Karsten Thygesen <span class=\"token operator\">&lt;</span>karthy@kom.auc.dk<span class=\"token operator\">></span>.\n\n       The  mailing  lists are archived<span class=\"token punctuation\">;</span> the archives can be accessed via the administrative addresses listed above.  There is also a hypertext archive, maintained by Geoff Wing <span class=\"token operator\">&lt;</span>gcw@zsh.org<span class=\"token operator\">></span>, available\n       at https://www.zsh.org/mla/.\n\nTHE ZSH FAQ\n       Zsh has a list of Frequently Asked Questions <span class=\"token punctuation\">(</span>FAQ<span class=\"token punctuation\">)</span>, maintained by Peter Stephenson <span class=\"token operator\">&lt;</span>pws@zsh.org<span class=\"token operator\">></span>.  It is regularly posted to the newsgroup comp.unix.shell and the zsh-announce mailing list.   The\n       latest version can be found at any of the Zsh FTP sites, or at http://www.zsh.org/FAQ/.  The contact address <span class=\"token keyword\">for</span> FAQ-related matters is <span class=\"token operator\">&lt;</span>faqmaster@zsh.org<span class=\"token operator\">></span>.\n\nTHE ZSH WEB PAGE\n       Zsh has a web page <span class=\"token function\">which</span> is located at https://www.zsh.org/.  This is maintained by Karsten Thygesen <span class=\"token operator\">&lt;</span>karthy@zsh.org<span class=\"token operator\">></span>, of SunSITE Denmark.  The contact address <span class=\"token keyword\">for</span> web-related matters is <span class=\"token operator\">&lt;</span>webmas-\n       ter@zsh.org<span class=\"token operator\">></span>.\n\nTHE ZSH USERGUIDE\n       A userguide is currently <span class=\"token keyword\">in</span> preparation.  It is intended to complement the manual, with explanations and hints on issues where the manual can be cabbalistic, hierographic, or downright mystifying\n       <span class=\"token punctuation\">(</span>for  example,  the  word <span class=\"token variable\"><span class=\"token variable\">`</span>hierographic' does not exist<span class=\"token punctuation\">)</span>.  It can be viewed <span class=\"token keyword\">in</span> its current state at http://zsh.sourceforge.net/Guide/.  At the <span class=\"token function\">time</span> of writing, chapters dealing with startup files\n       and their contents and the new completion system were essentially complete.\n\nINVOCATION\n       The following flags are interpreted by the shell when invoked to determine where the shell will <span class=\"token builtin class-name\">read</span> commands from:\n\n       -c     Take the first argument as a <span class=\"token builtin class-name\">command</span> to execute, rather than reading commands from a script or standard input.  If any further arguments are given, the first one is assigned to $0,  rather\n              than being used as a positional parameter.\n\n       -i     Force shell to be interactive.  It is still possible to specify a script to execute.\n\n       -s     Force shell to <span class=\"token builtin class-name\">read</span> commands from the standard input.  If the -s flag is not present and an argument is given, the first argument is taken to be the pathname of a script to execute.\n\n       If  there are any remaining arguments after option processing, and neither of the options -c or -s was supplied, the first argument is taken as the <span class=\"token function\">file</span> name of a script containing shell commands\n       to be executed.  If the option PATH_SCRIPT is set, and the <span class=\"token function\">file</span> name does not contain a directory path <span class=\"token punctuation\">(</span>i.e. there is no <span class=\"token variable\">`</span></span>/<span class=\"token string\">' in the name), first the current directory and then  the  command  path\n       given by the variable PATH are searched for the script.  If the option is not set or the file name contains a <span class=\"token variable\"><span class=\"token variable\">`</span>/' it is used directly.\n\n       After the first one or two arguments have been appropriated as described above, the remaining arguments are assigned to the positional parameters.\n\n       For further options, <span class=\"token function\">which</span> are common to invocation and the <span class=\"token builtin class-name\">set</span> builtin, see zshoptions<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.\n\n       The  long  option  <span class=\"token variable\">`</span></span>--emulate'</span> followed <span class=\"token punctuation\">(</span>in a separate word<span class=\"token punctuation\">)</span> by an emulation mode may be passed to the shell.  The emulation modes are those described <span class=\"token keyword\">for</span> the emulate builtin, see zshbuiltins<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.\n       The <span class=\"token variable\"><span class=\"token variable\">`</span>--emulate' option must precede any other options <span class=\"token punctuation\">(</span>which might otherwise be overridden<span class=\"token punctuation\">)</span>, but following options are honoured, so may be used to modify the requested emulation mode.  Note  that\n       certain  extra steps are taken to ensure a smooth emulation when this option is used compared with the emulate <span class=\"token builtin class-name\">command</span> within the shell: <span class=\"token keyword\">for</span> example, variables that conflict with POSIX usage such\n       as path are not defined within the shell.\n\n       Options may be specified by name using the -o option.  -o acts like a single-letter option, but takes a following string as the option name.  For example,\n\n              <span class=\"token function\">zsh</span> -x -o shwordsplit scr\n\n       runs the script scr, setting the XTRACE option by the corresponding letter <span class=\"token variable\">`</span></span>-x<span class=\"token string\">' and the SH_WORD_SPLIT option by name.  Options may be turned off by name by using +o instead  of  -o.   -o  can  be\n       stacked up with preceding single-letter options, so for example <span class=\"token variable\"><span class=\"token variable\">`</span>-xo shwordsplit' or <span class=\"token variable\">`</span></span>-xoshwordsplit'</span> is equivalent to <span class=\"token variable\"><span class=\"token variable\">`</span>-x -o shwordsplit'.\n\n       Options  may  also  be  specified  by  name  <span class=\"token keyword\">in</span> GNU long option style, <span class=\"token variable\">`</span></span>--option-name<span class=\"token string\">'.  When this is done, <span class=\"token variable\"><span class=\"token variable\">`</span>-' characters <span class=\"token keyword\">in</span> the option name are permitted: they are translated into <span class=\"token variable\">`</span></span>_'</span>, and thus\n       ignored.  So, <span class=\"token keyword\">for</span> example, <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">zsh</span> --sh-word-split' invokes <span class=\"token function\">zsh</span> with the SH_WORD_SPLIT option turned on.  Like other option syntaxes, options can be turned off by replacing the initial  <span class=\"token variable\">`</span></span>-<span class=\"token string\">'  with  a\n       <span class=\"token variable\"><span class=\"token variable\">`</span>+'<span class=\"token punctuation\">;</span>  thus <span class=\"token variable\">`</span></span>+-sh-word-split'</span> is equivalent to <span class=\"token variable\"><span class=\"token variable\">`</span>--no-sh-word-split'.  Unlike other option syntaxes, GNU-style long options cannot be stacked with any other options, so <span class=\"token keyword\">for</span> example <span class=\"token variable\">`</span></span>-x-shwordsplit<span class=\"token string\">'\n       is an error, rather than being treated like <span class=\"token variable\"><span class=\"token variable\">`</span>-x --shwordsplit'.\n\n       The special GNU-style option <span class=\"token variable\">`</span></span>--version'</span> is handled<span class=\"token punctuation\">;</span> it sends to standard output the shell's version information, <span class=\"token keyword\">then</span> exits successfully.  <span class=\"token variable\"><span class=\"token variable\">`</span>--help' is also handled<span class=\"token punctuation\">;</span> it sends to standard output a\n       list of options that can be used when invoking the shell, <span class=\"token keyword\">then</span> exits successfully.\n\n       Option  processing  may be finished, allowing following arguments that start with <span class=\"token variable\">`</span></span>-<span class=\"token string\">' or <span class=\"token variable\"><span class=\"token variable\">`</span>+' to be treated as normal arguments, <span class=\"token keyword\">in</span> two ways.  Firstly, a lone <span class=\"token variable\">`</span></span>-'</span> <span class=\"token punctuation\">(</span>or <span class=\"token variable\"><span class=\"token variable\">`</span>+'<span class=\"token punctuation\">)</span> as an argument by itself\n       ends option processing.  Secondly, a special option <span class=\"token variable\">`</span></span>--<span class=\"token string\">' (or <span class=\"token variable\"><span class=\"token variable\">`</span>+-'<span class=\"token punctuation\">)</span>, <span class=\"token function\">which</span> may be specified on its own <span class=\"token punctuation\">(</span>which is the standard POSIX usage<span class=\"token punctuation\">)</span> or may be stacked with preceding  options  <span class=\"token punctuation\">(</span>so  <span class=\"token variable\">`</span></span>-x-'</span>  is\n       equivalent  to  <span class=\"token variable\"><span class=\"token variable\">`</span>-x  --'<span class=\"token punctuation\">)</span>.   Options are not permitted to be stacked after <span class=\"token variable\">`</span></span>--<span class=\"token string\">' (so <span class=\"token variable\"><span class=\"token variable\">`</span>-x-f' is an error<span class=\"token punctuation\">)</span>, but note the GNU-style option form discussed above, where <span class=\"token variable\">`</span></span>--shwordsplit'</span> is permitted and\n       does not end option processing.\n\n       Except when the sh/ksh emulation single-letter options are <span class=\"token keyword\">in</span> effect, the option <span class=\"token variable\"><span class=\"token variable\">`</span>-b' <span class=\"token punctuation\">(</span>or <span class=\"token variable\">`</span></span>+b<span class=\"token string\">') ends option processing.  <span class=\"token variable\"><span class=\"token variable\">`</span>-b' is like <span class=\"token variable\">`</span></span>--'</span>,  except  that  further  single-letter  options  can  be\n       stacked after the <span class=\"token variable\"><span class=\"token variable\">`</span>-b' and will take effect as normal.\n\nCOMPATIBILITY\n       Zsh  tries  to emulate <span class=\"token function\">sh</span> or ksh when it is invoked as <span class=\"token function\">sh</span> or ksh respectively<span class=\"token punctuation\">;</span> <span class=\"token function\">more</span> precisely, it looks at the first letter of the name by <span class=\"token function\">which</span> it was invoked, excluding any initial <span class=\"token variable\">`</span></span>r<span class=\"token string\">' (assumed\n       to stand for <span class=\"token variable\"><span class=\"token variable\">`</span>restricted'<span class=\"token punctuation\">)</span>, and <span class=\"token keyword\">if</span> that is <span class=\"token variable\">`</span></span>b'</span>, <span class=\"token variable\"><span class=\"token variable\">`</span>s' or <span class=\"token variable\">`</span></span>k<span class=\"token string\">' it will emulate sh or ksh.  Furthermore, if invoked as su (which happens on certain systems when the shell is executed by  the  su  com-\n       mand), the shell will try to find an alternative name from the SHELL environment variable and perform emulation based on that.\n\n       In  sh  and  ksh  compatibility  modes  the following parameters are not special and not initialized by the shell: ARGC, argv, cdpath, fignore, fpath, HISTCHARS, mailpath, MANPATH, manpath, path,\n       prompt, PROMPT, PROMPT2, PROMPT3, PROMPT4, psvar, status, watch.\n\n       The usual zsh startup/shutdown scripts are not executed.  Login shells source /etc/profile followed by <span class=\"token environment constant\">$HOME</span>/.profile.  If the ENV environment variable is set on invocation, <span class=\"token variable\">$ENV</span> is sourced after\n       the profile scripts.  The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname.  Note that the PRIVILEGED option\n       also affects the execution of startup files.\n\n       The following options are set if the shell is invoked as sh or ksh: NO_BAD_PATTERN, NO_BANG_HIST,  NO_BG_NICE,  NO_EQUALS,  NO_FUNCTION_ARGZERO,  GLOB_SUBST,  NO_GLOBAL_EXPORT,  NO_HUP,  INTERAC-\n       TIVE_COMMENTS,  KSH_ARRAYS,  NO_MULTIOS,  NO_NOMATCH, NO_NOTIFY, POSIX_BUILTINS, NO_PROMPT_PERCENT, RM_STAR_SILENT, SH_FILE_EXPANSION, SH_GLOB, SH_OPTION_LETTERS, SH_WORD_SPLIT.  Additionally the\n       BSD_ECHO and IGNORE_BRACES options are set if zsh is invoked as sh.  Also, the KSH_OPTION_PRINT, LOCAL_OPTIONS, PROMPT_BANG, PROMPT_SUBST and SINGLE_LINE_ZLE options are set if zsh is invoked  as\n       ksh.\n\nRESTRICTED SHELL\n       When  the  basename of the command used to invoke zsh starts with the letter <span class=\"token variable\"><span class=\"token variable\">`</span>r' or the <span class=\"token variable\">`</span></span>-r'</span> <span class=\"token builtin class-name\">command</span> line option is supplied at invocation, the shell becomes restricted.  Emulation mode is deter-\n       mined after stripping the letter <span class=\"token variable\"><span class=\"token variable\">`</span>r<span class=\"token string\">' from the invocation name.  The following are disabled in restricted mode:\n\n       o      changing directories with the cd builtin\n\n       o      changing or unsetting the EGID, EUID, GID, HISTFILE, HISTSIZE, IFS, LD_AOUT_LIBRARY_PATH, LD_AOUT_PRELOAD, LD_LIBRARY_PATH, LD_PRELOAD, MODULE_PATH, module_path, PATH, path, SHELL, UID and\n              USERNAME parameters\n\n       o      specifying command names containing /\n\n       o      specifying command pathnames using hash\n\n       o      redirecting output to files\n\n       o      using the exec builtin command to replace the shell with another command\n\n       o      using jobs -Z to overwrite the shell process'</span> argument and environment space\n\n       o      using the ARGV0 parameter to override argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> external commands\n\n       o      turning off restricted mode with <span class=\"token builtin class-name\">set</span> +r or unsetopt RESTRICTED\n\n       These  restrictions  are enforced after processing the startup files.  The startup files should <span class=\"token builtin class-name\">set</span> up <span class=\"token environment constant\">PATH</span> to point to a directory of commands <span class=\"token function\">which</span> can be safely invoked <span class=\"token keyword\">in</span> the restricted envi-\n       ronment.  They may also <span class=\"token function\">add</span> further restrictions by disabling selected builtins.\n\n       Restricted mode can also be activated any <span class=\"token function\">time</span> by setting the RESTRICTED option.  This immediately enables all the restrictions described above even <span class=\"token keyword\">if</span> the  shell  still  has  not  processed  all\n       startup files.\n\nSTARTUP/SHUTDOWN FILES\n       Commands  are  first  <span class=\"token builtin class-name\">read</span> from /etc/zshenv<span class=\"token punctuation\">;</span> this cannot be overridden.  Subsequent behaviour is modified by the RCS and GLOBAL_RCS options<span class=\"token punctuation\">;</span> the former affects all startup files, <span class=\"token keyword\">while</span> the second\n       only affects global startup files <span class=\"token punctuation\">(</span>those shown here with an path starting with a /<span class=\"token punctuation\">)</span>.  If one of the options is <span class=\"token builtin class-name\">unset</span> at any point, any subsequent startup file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> of the  corresponding  <span class=\"token builtin class-name\">type</span>  will\n       not be read.  It is also possible <span class=\"token keyword\">for</span> a <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> $ZDOTDIR to re-enable GLOBAL_RCS. Both RCS and GLOBAL_RCS are <span class=\"token builtin class-name\">set</span> by default.\n\n       Commands  are  <span class=\"token keyword\">then</span>  <span class=\"token builtin class-name\">read</span> from $ZDOTDIR/.zshenv.  If the shell is a login shell, commands are <span class=\"token builtin class-name\">read</span> from /etc/zprofile and <span class=\"token keyword\">then</span> $ZDOTDIR/.zprofile.  Then, <span class=\"token keyword\">if</span> the shell is interactive, commands are\n       <span class=\"token builtin class-name\">read</span> from /etc/zshrc and <span class=\"token keyword\">then</span> $ZDOTDIR/.zshrc.  Finally, <span class=\"token keyword\">if</span> the shell is a login shell, /etc/zlogin and $ZDOTDIR/.zlogin are read.\n\n       When a login shell exits, the files $ZDOTDIR/.zlogout and <span class=\"token keyword\">then</span> /etc/zlogout are read.  This happens with either an explicit <span class=\"token builtin class-name\">exit</span> via the <span class=\"token builtin class-name\">exit</span> or <span class=\"token builtin class-name\">logout</span> commands, or an implicit  <span class=\"token builtin class-name\">exit</span>  by  reading\n       end-of-file  from the terminal.  However, <span class=\"token keyword\">if</span> the shell terminates due to exec'ing another process, the <span class=\"token builtin class-name\">logout</span> files are not read.  These are also affected by the RCS and GLOBAL_RCS options.  Note\n       also that the RCS option affects the saving of <span class=\"token function\">history</span> files, i.e. <span class=\"token keyword\">if</span> RCS is <span class=\"token builtin class-name\">unset</span> when the shell exits, no <span class=\"token function\">history</span> <span class=\"token function\">file</span> will be saved.\n\n       If ZDOTDIR is unset, <span class=\"token environment constant\">HOME</span> is used instead.  Files listed above as being <span class=\"token keyword\">in</span> /etc may be <span class=\"token keyword\">in</span> another directory, depending on the installation.\n\n       As /etc/zshenv is run <span class=\"token keyword\">for</span> all instances of zsh, it is important that it be kept as small as possible.  In particular, it is a good idea to put code that does not need to be run <span class=\"token keyword\">for</span>  every  single\n       shell behind a <span class=\"token builtin class-name\">test</span> of the form <span class=\"token variable\">`</span></span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -o rcs <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">..</span>.<span class=\"token string\">' so that it will not be executed when zsh is invoked with the `-f'</span> option.\n\n       Any  of  these  files  may be pre-compiled with the zcompile <span class=\"token builtin class-name\">builtin</span> <span class=\"token builtin class-name\">command</span> <span class=\"token punctuation\">(</span>see zshbuiltins<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span>.  If a compiled <span class=\"token function\">file</span> exists <span class=\"token punctuation\">(</span>named <span class=\"token keyword\">for</span> the original <span class=\"token function\">file</span> plus the .zwc extension<span class=\"token punctuation\">)</span> and it is newer\n       than the original file, the compiled <span class=\"token function\">file</span> will be used instead.\n\nFILES\n       <span class=\"token variable\">$ZDOTDIR</span>/.zshenv\n       <span class=\"token variable\">$ZDOTDIR</span>/.zprofile\n       <span class=\"token variable\">$ZDOTDIR</span>/.zshrc\n       <span class=\"token variable\">$ZDOTDIR</span>/.zlogin\n       <span class=\"token variable\">$ZDOTDIR</span>/.zlogout\n       <span class=\"token variable\">${TMPPREFIX}</span>*   <span class=\"token punctuation\">(</span>default is /tmp/zsh*<span class=\"token punctuation\">)</span>\n       /etc/zshenv\n       /etc/zprofile\n       /etc/zshrc\n       /etc/zlogin\n       /etc/zlogout    <span class=\"token punctuation\">(</span>installation-specific - /etc is the default<span class=\"token punctuation\">)</span>\n\nSEE ALSO\n       sh<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, csh<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, tcsh<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, rc<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, bash<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, ksh<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshall<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshbuiltins<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshcompwid<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshcompsys<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshcompctl<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshcontrib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshexpn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshmisc<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshmodules<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,  zshoptions<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,  zsh-\n       param<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshroadmap<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshtcpsys<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshzftpsys<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, zshzle<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n       IEEE Standard <span class=\"token keyword\">for</span> information Technology - Portable Operating System Interface <span class=\"token punctuation\">(</span>POSIX<span class=\"token punctuation\">)</span> - Part <span class=\"token number\">2</span>: Shell and Utilities, IEEE Inc, <span class=\"token number\">1993</span>, ISBN <span class=\"token number\">1</span>-55937-255-9.\n\n<span class=\"token function\">zsh</span> <span class=\"token number\">5.7</span>.1                                                                                    February <span class=\"token number\">3</span>, <span class=\"token number\">2019</span>                                                                                       ZSH<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"man zsh 中身","date":"2021年01月04日","description":"","tags":["雑記"]}}},"pageContext":{"slug":"/2021/0104-man-zsh/","previous":{"fields":{"slug":"/2021/0102-new-yaer/"},"frontmatter":{"title":"2021年開始","tags":["雑記"]}},"next":{"fields":{"slug":"/2021/0105-internet-2000/"},"frontmatter":{"title":"ぼくのインターネット小学生時代(2004年〜2010年)","tags":["雑記"]}}}}}