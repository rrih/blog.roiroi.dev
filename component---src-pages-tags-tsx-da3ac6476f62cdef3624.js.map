{"version":3,"sources":["webpack:///./src/pages/tags.tsx"],"names":["config","autoAddCss","library","add","fas","far","fab","TagsPage","data","location","siteTitle","site","siteMetadata","title","description","className","icon","faTags","allMarkdownRemark","group","map","tag","key","fieldValue","to","kebabCase","totalCount","pageQuery"],"mappings":"4FAAA,yMAaAA,IAAOC,YAAa,EACpBC,IAAQC,IAAIC,IAAKC,IAAKC,KA6BPC,UA3BE,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClBC,EAAYF,EAAKG,KAAKC,aAAaC,MAEzC,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CACEG,MAAO,QACPC,YAAa,UAEf,yBAAKC,UAAU,sEACb,yBAAKA,UAAU,yCACb,kBAAC,IAAD,CAAiBC,KAAMZ,IAAIa,SAD7B,UAGA,yBAAKF,UAAU,yBACZP,EAAKU,kBAAkBC,MAAMC,KAAI,SAAAC,GAAG,OACrC,yBAAKC,IAAKD,EAAIE,YACZ,kBAAC,OAAD,CAAMC,GAAE,SAAWC,IAAUJ,EAAIE,YAAzB,IAAyCR,UAAU,wEACxDM,EAAIE,WADP,KACqBF,EAAIK,WADzB,aAaL,IAAMC,EAAY","file":"component---src-pages-tags-tsx-da3ac6476f62cdef3624.js","sourcesContent":["// ビルドエラーがでるため、一応残しておく。いつか抹消する\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport kebabCase from \"lodash/kebabCase\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { library, config } from '@fortawesome/fontawesome-svg-core'\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\nconfig.autoAddCss = false\nlibrary.add(fas, far, fab)\n\nconst TagsPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={\"全てのタグ\"}\n        description={\"全てのタグ\"}\n      />\n      <div className=\"flex-wrap container px-0 pb-4 mx-md-4 pr-md-5 px-3 px-sm-5 px-md-0\">\n        <div className=\"h3 mx-4 mx-md-0 text-center my-3 pt-4\">\n          <FontAwesomeIcon icon={fas.faTags} /> 全てのタグ\n        </div>\n        <div className=\"my-2 d-flex flex-wrap\">\n          {data.allMarkdownRemark.group.map(tag => (\n          <div key={tag.fieldValue}>\n            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`} className=\"m-1 text-decoration-none text-dark bg-light rounded px-1 text-nowrap\">\n              {tag.fieldValue} ({tag.totalCount})\n            </Link>\n          </div>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n            }\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"YYYY/MM/DD\")\n                        title\n                        description\n                    }\n                }\n            }\n        }\n    }\n`"],"sourceRoot":""}